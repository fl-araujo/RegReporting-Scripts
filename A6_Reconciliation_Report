import pandas as pd
import logging
from datetime import datetime
import os

# Setup logging
logging.basicConfig(level=logging.WARNING, format='%(levelname)s: %(message)s')

# Input files
CSV_FILE_1 = "input_files/italy_a6_fto_0162504.csv"
CSV_FILE_2 = "input_files/italy_a6_fto_4141051.csv"
CSV_FILE_3 = "input_files/italy_a6_fto_4141002.csv"
CSV_FILE_4 = "input_files/italy_a6_fto_4140151.csv"
CSV_FILE_5 = "input_files/italy_a6_fto_4140153.csv"
EXCEL_FILE = "input_files/036749_20250228_20250604_RDV_DETTAGLIO_VOCI_A6.xlsx"
EXCEL_CSV = "input_files/temp_excel_as_csv.csv"  # Will be created

OUTPUT_FILE = "output_files/A6__Italy_Validation_Results.txt"

# Excel column names
EXCEL_FILTER_COL_NAME = "FTO"
EXCEL_ISIN_COL_NAME = "00032"
EXCEL_CUSTOMER_COL_NAME = "COD. CLIENTE"

# CSV table configs
TABLE_CONFIGS = [
    ("162504", CSV_FILE_1, 'REC-INIZIO-RESTO VALUE 6', 'REC-INIZIO-NDG-VALORE', ['REC-INIZIO-RESTO VALUE 14', 'REC-INIZIO-RESTO VALUE 25'], True),
    ("4141051", CSV_FILE_2, 'REC-INIZIO-RESTO VALUE 3', 'REC-INIZIO-NDG-VALORE', ['REC-INIZIO-RESTO VALUE 7'], True),
    ("4141002", CSV_FILE_3, 'REC-INIZIO-RESTO VALUE 1', 'REC-INIZIO-NDG-VALORE', ['REC-INIZIO-RESTO VALUE 3'], False),  # <- skip ISIN check
    ("4140151", CSV_FILE_4, 'REC-INIZIO-RESTO VALUE 4', 'REC-INIZIO-NDG-VALORE', ['REC-INIZIO-RESTO VALUE 10', 'REC-INIZIO-RESTO VALUE 11'], True),
    ("4140153", CSV_FILE_5, 'REC-INIZIO-RESTO VALUE 4', 'REC-INIZIO-NDG-VALORE', ['REC-INIZIO-RESTO VALUE 10', 'REC-INIZIO-RESTO VALUE 11'], True),
]

def convert_excel_to_csv(excel_path, csv_path):
    if not os.path.exists(csv_path):
        df = pd.read_excel(excel_path, engine="openpyxl", usecols=[EXCEL_FILTER_COL_NAME, EXCEL_ISIN_COL_NAME, EXCEL_CUSTOMER_COL_NAME])
        df.to_csv(csv_path, index=False)

def load_excel_column_values(csv_path, filter_value, target_col_name):
    try:
        df = pd.read_csv(csv_path, dtype=str)
        filtered = df[df[EXCEL_FILTER_COL_NAME].astype(str).str.strip() == filter_value]
        return set(filtered[target_col_name].dropna().astype(str).str.strip().str.upper())
    except Exception as e:
        logging.error(f"Error reading from Excel CSV: {e}")
        return set()

def load_csv_data(csv_file, isin_col, customer_col, extra_cols):
    try:
        df = pd.read_csv(csv_file, dtype=str)
        df[isin_col] = df[isin_col].str.strip().str.upper()
        df[customer_col] = df[customer_col].str.strip().str.upper()
        for col in extra_cols:
            if col in df.columns:
                df[col] = df[col].astype(str).str.strip()
        return df
    except Exception as e:
        logging.error(f"Error loading CSV {csv_file}: {e}")
        return pd.DataFrame()

def parse_amount(value):
    try:
        if pd.isna(value):
            return None
        return float(str(value)[:15]) / 100
    except:
        return None

def format_missing(entries, key_col, csv_df, extra_cols, description):
    lines = [f"\n{description} present in CSV Input Files but missing in Metoda's Output:"]
    if not entries:
        lines.append("- None")
        return lines
    for val in sorted(entries):
        matching = csv_df[csv_df[key_col] == val]
        for _, row in matching.iterrows():
            extra_values = []
            for col in extra_cols:
                val_parsed = parse_amount(row.get(col))
                extra_values.append(f"{col}: {val_parsed:.2f}" if val_parsed is not None else f"{col}: N/A")
            lines.append(f"- {val} | " + " | ".join(extra_values))
    return lines

def generate_table_report(name, csv_df, isin_col, customer_col, excel_isins, excel_customers, extra_cols, check_isin, output):
    output.append(f"\nTable {name} Checks\n")

    csv_isins = set(csv_df[isin_col].dropna())
    csv_customers = set(csv_df[customer_col].dropna())

    match_isins = csv_isins == excel_isins
    match_customers = csv_customers == excel_customers

    # Update headers here:
    header = ["Check", "CSV Input Files", "Metoda's Output", "Match"]
    rows = []
    if check_isin:
        rows.append(["1. ISIN Check", str(len(csv_isins)), str(len(excel_isins)), "✅ True" if match_isins else "❌ False"])
    rows.append(["2. Customer Check", str(len(csv_customers)), str(len(excel_customers)), "✅ True" if match_customers else "❌ False"])

    col_widths = [max(len(row[i]) for row in [header] + rows) for i in range(len(header))]
    border = "-" * (sum(col_widths) + 3 * len(col_widths) + 1)

    output.append(border)
    output.append("| " + " | ".join(f"{header[i]:<{col_widths[i]}}" for i in range(len(header))) + " |")
    output.append(border)
    for row in rows:
        output.append("| " + " | ".join(f"{row[i]:<{col_widths[i]}}" for i in range(len(row))) + " |")
    output.append(border)

    if check_isin and not match_isins:
        output.extend(format_missing(csv_isins - excel_isins, isin_col, csv_df, extra_cols, "ISINs"))
    if not match_customers:
        output.extend(format_missing(csv_customers - excel_customers, customer_col, csv_df, extra_cols, "Customers"))

def main():
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    output = [f"\nTrade Republic Bank GmbH {timestamp}", "\nItaly A6 Output File Validations", ""]

    convert_excel_to_csv(EXCEL_FILE, EXCEL_CSV)

    for table_id, csv_file, isin_col, customer_col, extra_cols, check_isin in TABLE_CONFIGS:
        csv_df = load_csv_data(csv_file, isin_col, customer_col, extra_cols)
        excel_isins = load_excel_column_values(EXCEL_CSV, table_id, EXCEL_ISIN_COL_NAME)
        excel_customers = load_excel_column_values(EXCEL_CSV, table_id, EXCEL_CUSTOMER_COL_NAME)

        generate_table_report(
            name=table_id,
            csv_df=csv_df,
            isin_col=isin_col,
            customer_col=customer_col,
            excel_isins=excel_isins,
            excel_customers=excel_customers,
            extra_cols=extra_cols,
            check_isin=check_isin,
            output=output
        )

    final = "\n".join(output)
    print(final)
    os.makedirs(os.path.dirname(OUTPUT_FILE), exist_ok=True)
    with open(OUTPUT_FILE, 'w', encoding='utf-8') as f:
        f.write(final)

if __name__ == "__main__":
    main()
